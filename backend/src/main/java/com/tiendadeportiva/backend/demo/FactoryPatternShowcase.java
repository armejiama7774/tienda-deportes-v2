package com.tiendadeportiva.backend.demo;

import com.tiendadeportiva.backend.factory.ProductoCreationRequest;
import com.tiendadeportiva.backend.factory.ProductoFactoryManager;
import com.tiendadeportiva.backend.model.Producto;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;

/**
 * Clase utilitaria para demostrar el Factory Pattern de forma program√°tica.
 * √ötil para llamar desde controllers o tests.
 */
@Component
public class FactoryPatternShowcase {

    private final ProductoFactoryManager factoryManager;

    public FactoryPatternShowcase(ProductoFactoryManager factoryManager) {
        this.factoryManager = factoryManager;
    }

    /**
     * Demostraci√≥n completa del Factory Pattern con output formateado.
     */
    public String demonstrarFactoryPattern() {
        StringBuilder demo = new StringBuilder();
        
        demo.append("\nüè≠ =====================================================\n");
        demo.append("üè≠ DEMOSTRACI√ìN DEL FACTORY PATTERN\n");
        demo.append("üè≠ =====================================================\n\n");

        // 1. Mostrar factories disponibles
        demo.append(mostrarFactoriesDisponibles());
        
        // 2. Demo de creaci√≥n de productos
        demo.append(demoCreacionZapatillasRunning());
        demo.append(demoCreacionBotasFutbol());
        demo.append(demoCreacionZapatillasBasketball());
        
        // 3. Demo de validaciones
        demo.append(demoValidaciones());
        
        demo.append("\nüè≠ =====================================================\n");
        demo.append("üè≠ DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE\n");
        demo.append("üè≠ =====================================================\n");

        return demo.toString();
    }

    private String mostrarFactoriesDisponibles() {
        StringBuilder sb = new StringBuilder();
        sb.append("üìã FACTORIES DISPONIBLES EN EL SISTEMA:\n");
        
        ProductoFactoryManager.FactoryInfo info = factoryManager.getFactoryInfo();
        for (ProductoFactoryManager.FactoryInfo.FactoryDetails factory : info.getFactories()) {
            sb.append("   üè≠ ").append(factory.toString()).append("\n");
        }
        sb.append("\n");
        
        return sb.toString();
    }

    private String demoCreacionZapatillasRunning() {
        StringBuilder sb = new StringBuilder();
        sb.append("üëü DEMO 1: CREACI√ìN DE ZAPATILLAS RUNNING\n");
        sb.append("   üìù Creando 'Air Max Running Pro' con configuraciones autom√°ticas...\n");

        try {
            ProductoCreationRequest request = ProductoCreationRequest.builder()
                    .conNombre("Air Max Running Pro")
                    .conDescripcion("Zapatillas profesionales para running de larga distancia")
                    .conPrecio(new BigDecimal("150.00"))
                    .conCategoria("CALZADO")
                    .conTipo("RUNNING")
                    .conMarca("Nike")
                    .conStockInicial(null) // Para ver stock autom√°tico
                    .conTalla("42")
                    .conColor("Azul/Blanco")
                    .conMaterial("MESH")
                    .aplicarDescuentoLanzamiento(true)
                    .activarImmediatamente(true)
                    .build();

            Producto producto = factoryManager.crearProducto(request);
            
            sb.append("   ‚úÖ Producto creado exitosamente:\n");
            sb.append("      üì¶ Nombre: ").append(producto.getNombre()).append("\n");
            sb.append("      üí∞ Precio: $").append(producto.getPrecio()).append("\n");
            sb.append("      üìä Stock: ").append(producto.getStockDisponible()).append(" unidades (configurado autom√°ticamente)\n");
            sb.append("      ‚úÖ Activo: ").append(producto.isActivo()).append("\n");
            sb.append("      üîß Configuraciones autom√°ticas de RUNNING aplicadas\n");
            
        } catch (Exception e) {
            sb.append("   ‚ùå Error: ").append(e.getMessage()).append("\n");
        }
        
        sb.append("\n");
        return sb.toString();
    }

    private String demoCreacionBotasFutbol() {
        StringBuilder sb = new StringBuilder();
        sb.append("‚öΩ DEMO 2: CREACI√ìN DE BOTAS DE F√öTBOL\n");
        sb.append("   üìù Creando 'Mercurial Superfly' con configuraciones de f√∫tbol...\n");

        try {
            ProductoCreationRequest request = ProductoCreationRequest.builder()
                    .conNombre("Mercurial Superfly")
                    .conDescripcion("Botas de f√∫tbol para c√©sped natural")
                    .conPrecio(new BigDecimal("220.00"))
                    .conCategoria("CALZADO")
                    .conTipo("FUTBOL")
                    .conSubtipo("CESPED")
                    .conMarca("Nike")
                    .conStockInicial(null) // Para ver stock autom√°tico
                    .conTalla("41")
                    .conColor("Rojo")
                    .activarImmediatamente(true)
                    .build();

            Producto producto = factoryManager.crearProducto(request);
            
            sb.append("   ‚úÖ Producto creado exitosamente:\n");
            sb.append("      üì¶ Nombre: ").append(producto.getNombre()).append("\n");
            sb.append("      üí∞ Precio: $").append(producto.getPrecio()).append("\n");
            sb.append("      üìä Stock: ").append(producto.getStockDisponible()).append(" unidades (configurado para FUTBOL)\n");
            sb.append("      üîß Configuraciones espec√≠ficas de F√öTBOL aplicadas (tipo de tacos, etc.)\n");
            
        } catch (Exception e) {
            sb.append("   ‚ùå Error: ").append(e.getMessage()).append("\n");
        }
        
        sb.append("\n");
        return sb.toString();
    }

    private String demoCreacionZapatillasBasketball() {
        StringBuilder sb = new StringBuilder();
        sb.append("üèÄ DEMO 3: CREACI√ìN DE ZAPATILLAS BASKETBALL\n");
        sb.append("   üìù Creando 'Jordan Air 35' con configuraciones de basketball...\n");

        try {
            ProductoCreationRequest request = ProductoCreationRequest.builder()
                    .conNombre("Jordan Air 35")
                    .conDescripcion("Zapatillas de basketball de alto rendimiento")
                    .conPrecio(new BigDecimal("180.00"))
                    .conCategoria("CALZADO")
                    .conTipo("BASKETBALL")
                    .conMarca("Jordan")
                    .conStockInicial(null) // Para ver stock autom√°tico
                    .conTalla("44")
                    .conColor("Negro/Rojo")
                    .activarImmediatamente(true)
                    .build();

            Producto producto = factoryManager.crearProducto(request);
            
            sb.append("   ‚úÖ Producto creado exitosamente:\n");
            sb.append("      üì¶ Nombre: ").append(producto.getNombre()).append("\n");
            sb.append("      üí∞ Precio: $").append(producto.getPrecio()).append("\n");
            sb.append("      üìä Stock: ").append(producto.getStockDisponible()).append(" unidades (configurado para BASKETBALL)\n");
            sb.append("      üîß Configuraciones de BASKETBALL aplicadas (soporte tobillo, etc.)\n");
            
        } catch (Exception e) {
            sb.append("   ‚ùå Error: ").append(e.getMessage()).append("\n");
        }
        
        sb.append("\n");
        return sb.toString();
    }

    private String demoValidaciones() {
        StringBuilder sb = new StringBuilder();
        sb.append("üîç DEMO 4: VALIDACIONES ESPECIALIZADAS\n");

        // Test 1: Validaci√≥n exitosa
        ProductoCreationRequest requestValido = ProductoCreationRequest.builder()
                .conNombre("Producto V√°lido")
                .conPrecio(new BigDecimal("100.00"))
                .conCategoria("CALZADO")
                .conTipo("RUNNING")
                .conTalla("42")
                .build();

        ProductoFactoryManager.ValidationResult resultado1 = 
            factoryManager.validarPeticion(requestValido);
        
        sb.append("   ‚úÖ Validaci√≥n exitosa: ").append(resultado1.getMensaje()).append("\n");

        // Test 2: Talla inv√°lida
        ProductoCreationRequest requestTallaInvalida = ProductoCreationRequest.builder()
                .conNombre("Test Talla Inv√°lida")
                .conPrecio(new BigDecimal("100.00"))
                .conCategoria("CALZADO")
                .conTipo("RUNNING")
                .conTalla("99") // Talla inv√°lida
                .build();

        ProductoFactoryManager.ValidationResult resultado2 = 
            factoryManager.validarPeticion(requestTallaInvalida);
        
        sb.append("   ‚ùå Error talla inv√°lida: ").append(resultado2.getMensaje()).append("\n");

        // Test 3: Tipo no soportado
        ProductoCreationRequest requestTipoInvalido = ProductoCreationRequest.builder()
                .conNombre("Test Tipo Inv√°lido")
                .conPrecio(new BigDecimal("100.00"))
                .conCategoria("CALZADO")
                .conTipo("VOLEIBOL") // Tipo no soportado
                .build();

        ProductoFactoryManager.ValidationResult resultado3 = 
            factoryManager.validarPeticion(requestTipoInvalido);
        
        sb.append("   ‚ùå Error tipo no soportado: ").append(resultado3.getMensaje()).append("\n");

        sb.append("   üìä Sistema de validaciones funcionando correctamente\n\n");
        
        return sb.toString();
    }

    /**
     * Demo espec√≠fico para mostrar las diferencias de configuraci√≥n por tipo.
     */
    public String compararConfiguracionesPorTipo() {
        StringBuilder sb = new StringBuilder();
        sb.append("‚öôÔ∏è COMPARACI√ìN DE CONFIGURACIONES POR TIPO:\n\n");

        // Crear productos de diferentes tipos para comparar
        String[] tipos = {"RUNNING", "FUTBOL", "BASKETBALL", "HIKING"};
        
        for (String tipo : tipos) {
            try {
                ProductoCreationRequest request = ProductoCreationRequest.builder()
                        .conNombre("Test " + tipo)
                        .conPrecio(new BigDecimal("100.00"))
                        .conCategoria("CALZADO")
                        .conTipo(tipo)
                        .conMarca("TestMarca")
                        .build();

                Producto producto = factoryManager.crearProducto(request);
                
                sb.append("üî∏ ").append(tipo).append(":\n");
                sb.append("   üìä Stock autom√°tico: ").append(producto.getStockDisponible()).append(" unidades\n");
                sb.append("   üìù Descripci√≥n: ").append(producto.getDescripcion()).append("\n");
                sb.append("\n");
                
            } catch (Exception e) {
                sb.append("üî∏ ").append(tipo).append(": ‚ùå Error - ").append(e.getMessage()).append("\n\n");
            }
        }
        
        return sb.toString();
    }
}
