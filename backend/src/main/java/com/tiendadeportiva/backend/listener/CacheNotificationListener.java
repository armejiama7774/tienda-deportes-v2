package com.tiendadeportiva.backend.listener;

import com.tiendadeportiva.backend.event.ProductoCreadoEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

/**
 * Listener especializado en actualizaci√≥n de cache.
 * 
 * EVOLUCI√ìN ARQUITECT√ìNICA:
 * - Responsabilidad √∫nica: Solo maneja invalidaci√≥n/actualizaci√≥n de cache
 * - As√≠ncrono: No impacta performance de creaci√≥n de producto
 * - Preparado para integraci√≥n real con Redis/Hazelcast
 */
@Component
public class CacheNotificationListener {
    
    private static final Logger logger = LoggerFactory.getLogger(CacheNotificationListener.class);
    
    /**
     * Actualiza cache cuando se crea un producto
     */
    @Async
    @EventListener
    public void manejarProductoCreado(ProductoCreadoEvent evento) {
        try {
            logger.info("üîÑ Procesando actualizaci√≥n de cache para producto: {}", 
                       evento.getProducto().getNombre());
            
            actualizarCacheCatalogo(evento);
            invalidarCachesCategorias(evento);
            
            logger.info("‚úÖ Cache actualizado exitosamente para producto: {}", 
                       evento.getProducto().getNombre());
            
        } catch (Exception e) {
            logger.error("‚ùå Error actualizando cache para producto {}: {}", 
                        evento.getProducto().getId(), e.getMessage(), e);
            
            // TODO: En producci√≥n:
            // - Reintentar actualizaci√≥n de cache
            // - Alertar si el cache est√° fallando sistem√°ticamente
            // - M√©tricas de cache hit/miss
        }
    }
    
    /**
     * Actualiza cache principal del cat√°logo
     */
    private void actualizarCacheCatalogo(ProductoCreadoEvent evento) {
        // Simular operaci√≥n de cache
        try {
            Thread.sleep(50); // Operaci√≥n r√°pida de cache
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return;
        }
        
        // TODO: Integraci√≥n real con Redis
        // redisTemplate.opsForValue().set("producto:" + evento.getProducto().getId(), evento.getProducto());
        // redisTemplate.opsForList().rightPush("productos:nuevos", evento.getProducto().getId());
        
        logger.info("üîÑ Cache del cat√°logo actualizado - Producto: {} agregado a categor√≠a: {}", 
                   evento.getProducto().getNombre(), 
                   evento.getProducto().getCategoria());
    }
    
    /**
     * Invalida caches relacionados con categor√≠as
     */
    private void invalidarCachesCategorias(ProductoCreadoEvent evento) {
        // TODO: Invalidar caches espec√≠ficos
        // redisTemplate.delete("categoria:" + evento.getProducto().getCategoria());
        // redisTemplate.delete("productos:destacados");
        
        logger.info("üîÑ Caches de categor√≠a invalidados para: {}", 
                   evento.getProducto().getCategoria());
    }
}