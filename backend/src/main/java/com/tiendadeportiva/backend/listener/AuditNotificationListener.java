package com.tiendadeportiva.backend.listener;

import com.tiendadeportiva.backend.event.ProductoCreadoEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;

/**
 * Listener especializado en auditor√≠a y logging.
 * 
 * EVOLUCI√ìN ARQUITECT√ìNICA:
 * - Responsabilidad √∫nica: Solo maneja auditor√≠a
 * - As√≠ncrono: No bloquea operaciones de negocio
 * - Preparado para integraci√≥n con sistemas de auditor√≠a empresariales
 */
@Component
public class AuditNotificationListener {
    
    private static final Logger logger = LoggerFactory.getLogger(AuditNotificationListener.class);
    
    /**
     * Registra auditor√≠a cuando se crea un producto
     */
    @Async
    @EventListener
    public void manejarProductoCreado(ProductoCreadoEvent evento) {
        try {
            logger.info("üìã Procesando auditor√≠a para producto: {}", 
                       evento.getProducto().getNombre());
            
            registrarAuditoriaCreacion(evento);
            registrarMetricasNegocio(evento);
            
            logger.info("‚úÖ Auditor√≠a registrada exitosamente para producto: {}", 
                       evento.getProducto().getNombre());
            
        } catch (Exception e) {
            logger.error("‚ùå Error registrando auditor√≠a para producto {}: {}", 
                        evento.getProducto().getId(), e.getMessage(), e);
            
            // TODO: En producci√≥n:
            // - Auditor√≠a es cr√≠tica, podr√≠a requerir retry obligatorio
            // - Alertar inmediatamente si falla auditor√≠a
            // - Backup en sistema de auditor√≠a secundario
        }
    }
    
    /**
     * Registra evento de auditor√≠a en sistema de trazabilidad
     */
    private void registrarAuditoriaCreacion(ProductoCreadoEvent evento) {
        // Simular persistencia en tabla de auditor√≠a
        try {
            Thread.sleep(30); // Operaci√≥n r√°pida de DB
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return;
        }
        
        // TODO: Persistir en tabla AUDIT_LOG
        /*
        AuditLog auditLog = AuditLog.builder()
            .entidad("PRODUCTO")
            .entidadId(evento.getProducto().getId())
            .accion("CREAR")
            .usuario(evento.getUsuarioCreador())
            .fecha(evento.getFechaEvento())
            .datosAnteriores(null)
            .datosNuevos(objectMapper.writeValueAsString(evento.getProducto()))
            .build();
        auditRepository.save(auditLog);
        */
        
        logger.info("üìã Auditor√≠a registrada - Producto ID: {} creado por: {} en: {}", 
                   evento.getProducto().getId(), 
                   evento.getUsuarioCreador(), 
                   evento.getFechaEvento());
    }
    
    /**
     * Registra m√©tricas de negocio
     */
    private void registrarMetricasNegocio(ProductoCreadoEvent evento) {
        // TODO: Integraci√≥n con sistemas de m√©tricas (Micrometer, Prometheus)
        // meterRegistry.counter("productos.creados", "categoria", evento.getProducto().getCategoria()).increment();
        // meterRegistry.gauge("productos.precio.promedio", evento.getProducto().getPrecio().doubleValue());
        
        logger.info("üìä M√©tricas actualizadas - Categor√≠a: {} - Precio: ${}", 
                   evento.getProducto().getCategoria(), 
                   evento.getProducto().getPrecio());
    }
}