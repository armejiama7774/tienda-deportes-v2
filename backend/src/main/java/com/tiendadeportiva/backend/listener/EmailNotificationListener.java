package com.tiendadeportiva.backend.listener;

import com.tiendadeportiva.backend.event.ProductoCreadoEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

/**
 * Listener especializado en notificaciones por email.
 * 
 * EVOLUCI√ìN ARQUITECT√ìNICA:
 * - Responsabilidad √∫nica: Solo maneja emails
 * - As√≠ncrono: No bloquea la creaci√≥n del producto
 * - Testeable: Se puede testear independientemente
 * - Desacoplado: No conoce sobre ProductoService
 */
@Component
public class EmailNotificationListener {
    
    private static final Logger logger = LoggerFactory.getLogger(EmailNotificationListener.class);
    
    /**
     * Maneja notificaciones por email cuando se crea un producto
     * 
     * @Async: Se ejecuta as√≠ncronamente para no bloquear la transacci√≥n principal
     */
    @Async
    @EventListener
    public void manejarProductoCreado(ProductoCreadoEvent evento) {
        try {
            logger.info("üìß Procesando notificaci√≥n por email para producto: {}", 
                       evento.getProducto().getNombre());
            
            enviarEmailAdministradores(evento);
            
            logger.info("‚úÖ Email enviado exitosamente para producto: {}", 
                       evento.getProducto().getNombre());
            
        } catch (Exception e) {
            // üéØ MEJORA: Manejo de errores espec√≠fico para emails
            logger.error("‚ùå Error enviando email para producto {}: {}", 
                        evento.getProducto().getId(), e.getMessage(), e);
            
            // TODO: En producci√≥n, aqu√≠ podr√≠amos:
            // - Reintentar con backoff exponencial
            // - Enviar a cola de dead letter
            // - Alertar al equipo de operations
        }
    }
    
    /**
     * Env√≠a email a administradores
     * EVOLUCI√ìN: M√©todo m√°s especializado y testeable
     */
    private void enviarEmailAdministradores(ProductoCreadoEvent evento) {
        // Simular delay de servicio externo (async, no bloquea)
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return;
        }
        
        // TODO: Integraci√≥n real con servicio de email (SendGrid, SES, etc.)
        logger.info("üìß Email enviado a administradores sobre producto: {} - Precio: ${} - Creado por: {}", 
                   evento.getProducto().getNombre(), 
                   evento.getProducto().getPrecio(),
                   evento.getUsuarioCreador());
    }
}